#mar=rep(3, 6))
#loop over rows to draw them, add 1 as max and 0 as min for each var
lapply(1:30, function(i) {
radarchart(rbind(rep(1,6), rep(0,6), team.pitching.z[i,-1]), pdensity=c(0, 0, 100),
title=team.pitching.z[i, 1], maxmin=F, axistype=0, centerzero=T)
})
#i.e., a low BB% is closer to the edge
par(mar=c(0, 1, 1, 0)) #decrease default margin
layout(matrix(1:30, ncol=6)) #draw 6 plots to device
#par(mfrow=n2mfrow(nrow(pitchers.sorted))
#mar=rep(3, 6))
#loop over rows to draw them, add 1 as max and 0 as min for each var
lapply(1:30, function(i) {
radarchart(rbind(rep(1,6), rep(0,6), team.pitching.z[i,-1]), pdensity=c(0, 0, 100),
title=team.pitching.z[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
})
one.team.pitching<-team.pitching.z[1,]
lapply(1:1, function(i) {
radarchart(rbind(rep(1,1), rep(0,1), one.team.pitching[i,-1]), pdensity=c(0, 0, 100),
title=one.team.pitching[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
})
one.team.pitching<-team.pitching.z[1,]
lapply(1:1, function(i) {
radarchart(rbind(rep(1,1), rep(0,1), one.team.pitching[i,-1]), pdensity=c(0, 0, 100),
title=one.team.pitching[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
})
par(mar=c(0, 1, 1, 0)) #decrease default margin
layout(matrix(1:30, ncol=6)) #draw 6 plots to device
#par(mfrow=n2mfrow(nrow(pitchers.sorted))
#mar=rep(3, 6))
#loop over rows to draw them, add 1 as max and 0 as min for each var
lapply(1:30, function(i) {
radarchart(rbind(rep(1,6), rep(0,6), team.pitching.z[i,-1]), pdensity=c(0, 0, 100),
title=team.pitching.z[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
})
one.team.pitching<-team.pitching.z[30,]
lapply(1:1, function(i) {
radarchart(rbind(rep(1,1), rep(0,1), one.team.pitching[i,-1]), pdensity=c(0, 0, 100),
title=one.team.pitching[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
})
team.pitching.z[30,]
install.packages(c("curl", "evaluate", "git2r", "httpuv", "manipulate", "mapproj", "shiny"))
shiny::runApp('~/R work/Shiny tutorial/baseball')
hitters<- read.csv("hitters.csv", header=T)
#sort pitchers matrix to only include normalized data
hitters.sorted<-hitters[,c(1,3,5,7,9,11)]
hitters.sorted
library(XML)
url <- "http://www.fangraphs.com/leaders.aspx?pos=all&stats=bat&lg=all&qual=0&type=c,34,35,199,40,60&season=2015&month=0&season1=&ind=0&team=0,ts&rost=&age=&filter=&players=0"
data <- readHTMLTable(url, stringsAsFactors = FALSE)
data[[1]] # select the first table
head(data)
?readHTMLTable
pitchers<- read.csv("pitchers.csv", header=T)
#sort pitchers matrix to only include normalized data
pitchers.sorted<-pitchers[,c(1,3,5,7,9,11,13)]
head(pitchers.sorted)
pitchers.sorted$Name
choices=c(pitchers.sorted$Name)
choices
choices=pitchers.sorted$Name
choices
pitchers.sorted[1,]
pitchers.sorted[1,1]
pitchers.sorted$Name[1,]
pitchers.sorted$Name(1)
pitch.labels =c("HR/9", 'K%', 'BB%', 'WHIP', 'BABIP', 'FIP')
one.pitcher<-pitchers.sorted[42,]
radarchart(one.pither[1,-1],pdensity=c(0, 0, 100),
title=one.pitcher[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
library(fmsb)
radarchart(one.pither[1,-1],pdensity=c(0, 0, 100),
title=one.pitcher[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
radarchart(one.pitcher[1,-1],pdensity=c(0, 0, 100),
title=one.pitcher[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
radarchart(one.pitcher[1,-1],pdensity=c(0, 0, 100),
title=one.pitcher[-1, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
radarchart(one.pitcher[1,-1],pdensity=c(0, 0, 100),
title=one.pitcher[1, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
radarchart(one.pitcher[1,1],pdensity=c(0, 0, 100),
title=one.pitcher[1, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
one.pitcher
?radarchart
radarchart(one.pitcher, pdensity=c(0, 0, 100),
title=one.pitcher[1, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
radarchart(one.pitcher, pdensity=c(0, 0, 100),
title=one.pitcher[1, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
radarchart(rbind(rep(1,1), rep(0,1), one.pitcher[1,-1]), pdensity=c(0, 0, 100),
title=one.pitcher[1, 1], maxmin=F, axistype=0, centerzero=T, vlabels=pitch.labels)
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(shiny)
shiny::runApp()
shiny::runApp('~/R work/Shiny tutorial/baseball')
shiny::runApp()
setwd("~/R work/baseballRadarCharts")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
input$var
shiny::runApp()
pitchers.sorted[1,1]
shiny::runApp()
shiny::runApp()
levels(pitchers.sorted$Name)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?reactive
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
pitchers.sorted
test<-pitchers.sorted$Name("Clayton Kershaw")
test<-subset(pitchers.sorted, pitchers.sorted$Name=="Clayton Kershaw")
test
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
?radarchart
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp('charts v2 dataset choice')
shiny::runApp()
library(XML)
url <- "http://games.espn.go.com/ffl/boxscorefull?leagueId=74920&teamId=5&scoringPeriodId=15&seasonId=2014&view=scoringperiod&version=full"
data <- readHTMLTable(url, stringsAsFactors = FALSE)
data[[1]] # select the first table
data
library(rCharts)
library(fmsb)
#load pitcher data
hitters<- read.csv("hitters.csv", header=T)
#sort pitchers matrix to only include normalized data
hitters.sorted<-hitters[,c(1,3,5,7,9,11)]
hitters.
hitters
head(hitters)
?scale
?apply
test<-subset(hitters, hitters$Def)
test<hitters[c(1,2)]
test<hitters[c(1,2),]
test<hitters[,c(1,2)]
test
test <- hitters[,c(1,2)]
test
head(test)
normalit<-function(m){
(m - min(m))/(max(m)-min(m))
}
apply(test, 2, normalit)
head(test)
summary(test)
normalit(test$Def)
test
test$Def<-normalit(test$Def)
head(test)
head(hitters.sorted)
hitters.orig<-hitters[,c(1,2,4,6,8,10)]
head(hitters.orig)
normalit(hitters.orig)
normalit(hitters.orig[c(2,3,4,5)])
normalit(hiters.org$Def)
normalit(hitters.orig$Def)
install.packages('httr')
library(XML)
library(httr)
handle <- handle("http://games.espn.go.com/ffl/boxscorefull?leagueId=74920&teamId=5&scoringPeriodId=15&seasonId=2014&view=scoringperiod&version=full")
path   <- "amember/login.php"
# fields found in the login form.
login <- list(
amember_login = "powellcua"
,amember_pass  = "yellow"
)
response <- POST(handle = handle, path = path, body = login)
response
url <- "http://games.espn.go.com/ffl/boxscorefull?leagueId=446910&teamId=3&scoringPeriodId=15&seasonId=2014&view=scoringperiod&version=full"
data <- readHTMLTable(url, stringsAsFactors = FALSE)
data[[1]] # select the first table
url <- "http://www.baseball-reference.com/leagues/MLB/1990-misc.shtml"
data <- readHTMLTable(url, stringsAsFactors = FALSE)
data[[1]] # select the first table
?readHTMLTable
url <- "http://games.espn.go.com/ffl/boxscorefull?leagueId=74920&teamId=5&scoringPeriodId=15&seasonId=2014&view=scoringperiod&version=full"
data <- readHTMLTable(url)
data[1]
data[2]
data[3]
data[4]
data[5]
data[6]
library(XML)
theurl <- "http://games.espn.go.com/ffl/boxscorefull?leagueId=446910&teamId=3&scoringPeriodId=15&seasonId=2014&view=scoringperiod&version=full"
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
tables
n.rows
library(httr)
library(XML)
?POST
library(httr)
library(XML)
handle <- handle("hhttp://games.espn.go.com/ffl/signin?")
path   <- "amember/login.php"
# fields found in the login form.
login <- list(
amember_login = "powellcua"
,amember_pass  = "yellow"
,amember_redirect_url =
"http://games.espn.go.com/ffl/boxscorefull?leagueId=446910&teamId=3&scoringPeriodId=15&seasonId=2014&view=scoringperiod&version=full"
)
response <- POST(handle = handle, path = path, body = login)
install.packages("RSelenium")
library(RSelenium)
loginURL <- "http://games.espn.go.com/ffl/signin"
user <- 'powellcua'
pass <- 'yellow'
RSelenium::checkForServer()
RSelenium::startServer()
remDr <- remoteDriver()
remDr$open()
remDr$navigate(loginURL)
webElem <- remDr$findElement('name', 'username')
webElem$sendKeysToElement(list(user))
webElem <- remDr$findElement('name', 'password')
webElem$sendKeysToElement(list(pass))
remDr$findElement('name', 'submit')$clickElement()
dataURL <-     "http://games.espn.go.com/ffl/boxscorefull?leagueId=446910&teamId=3&scoringPeriodId=15&seasonId=2014&view=scoringperiod&version=full"
remDr$navigate(dataURL)
# YOU can get the page source for example
pageSrc <- remDr$getPageSource()[[1]]
# now operate on pageSrc using for example library(XML) etc
# readHTMLTable(pageSrc) # for example
remDr$close()
remDr$closeServer()
pageSrc
handle <- handle("http://games.espn.go.com/ffl/signin")
# fields found in the login form.
login <- list(
amember_login = "powellcua"
,amember_pass  = "yellow"
,amember_redirect_url =
"http://games.espn.go.com/ffl/boxscorefull?leagueId=446910&teamId=3&scoringPeriodId=15&seasonId=2014&view=scoringperiod&version=full"
)
response <- POST(handle = handle, body = login)
response
type(response)
head(response)
library("RCurl")
library("XML")
loginURL <- "http://games.espn.go.com/ffl/signin"
dataURL <-     "http://games.espn.go.com/ffl/boxscorefull?leagueId=446910&teamId=3&scoringPeriodId=15&seasonId=2014&view=scoringperiod&version=full"
# ESPN Fantasy Football Login Screen
userID <- dQuote("powellcua")
pword <-dQuote("yellow")
pushbutton <- dQuote("OK")
# concatenate the url and log in options
FFLsigninURL <- paste(loginURL ,
"&username=",userID,
"&password=",pword,
"&submit=",pushbutton)
page <- getURL(loginURL , verbose = TRUE)
page
theurl <- "http://games.espn.go.com/ffl/boxscorefull?leagueId=446910&teamId=3&scoringPeriodId=15&seasonId=2014&view=scoringperiod&version=full"
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
n.rows
tables
page
library(XML)
library(httr)
url <- "http://www.fangraphs.com/leaders.aspx?pos=all&stats=bat&lg=all&qual=0&type=c,34,35,37,40,111,199&season=2015&month=0&season1=&ind=0&team=0,ts&rost=&age=&filter=&players=0"
data <- readHTMLTable(url, stringsAsFactors = FALSE)
data[[1]] # select the first table
tables <- readHTMLTable(url)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
tables
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
n.rows
LeaderBoard1_dg1_ct100
n.rows$LeaderBoard1_dg1_ct100
leaderboard<-tables[[which.max(n.rows)]]
leaderboard
summary(n.rows)
n.rows
tables
tables$LeaderBoard1_dg1_ctl00
leaderboard<-tables$LeaderBoard1_dg1_ctl00
leaderboard<-tables$LeaderBoard1_dg1_ctl00
tables$LeaderBoard1_dg1_ctl00
leaderboard
leaderboard.df<-data.frame(leaderboard)
leaderboard.df
leaderboard.df$BB.
#scale data between 0 and 1
scale.normal<-function(m){
(m - min(m))/(max(m)-min(m))
}
#inverse scale data between 0 and 1
scale.inverse<-function(m){
(m - min(m))/(max(m)-min(m))
}
leaderboard$BsR <- scale.normal(leaderboard$BsR)
summary(leaderboard.df)
summary(leaderboard)
class(leaderboard)
leaderboard<- lapply(leaderboard, as.character)
summary(leaderboard)
leaderboard$BsR <- scale.normal(leaderboard$BsR)
head(leaderboard)
leaderboard
leaderboard<- lapply(leaderboard, as.numeric)
leaderboard
leaderboard$BsR <- scale.normal(leaderboard$BsR)
leaderboard
leaderboard<-data.frame(tables$LeaderBoard1_dg1_ctl00)
leaderboard
as.numeric(leaderboard$BB.)
class(leaderboard$BB.)
as.character(leaderboard$BB.)
?gsub
gsub("%", "", leaderboard$BB.)
gsub(" %", "", leaderboard$BB.)
leaderboard$BB.<-gsub(" %", "", leaderboard$BB.)
leaderboard
scale.normal(leaderboard$BB.)
scale.normal(leaderboard$BsR)
leaderboard$BsR <- scale.normal(as.numeric(leaderboard$BsR))
leaderboard
leaderboard$BB. <- scale.normal(as.numeric(leaderboard$BB.))
leaderboard
leaderboard<-data.frame(tables$LeaderBoard1_dg1_ctl00)
leaderboard
leaderboard <- gsub(" %", "", leaderboard)
leaderboard$BsR <- scale.normal(as.numeric(leaderboard$BsR))
leaderboard$BB. <- scale.normal(as.numeric(leaderboard$BB.))
leaderboard
leaderboard<-data.frame(tables$LeaderBoard1_dg1_ctl00)
leaderboard
leaderboard <- gsub(" %", "", leaderboard)
leaderboard
leaderboard<-data.frame(tables$LeaderBoard1_dg1_ctl00)
leaderboard$BB. <- gsub(" %", "", leaderboard$BB.)
leaderboard$K. <- gsub(" %", "", leaderboard$K.)
leaderboard
leaderboard$BsR <- scale.normal(as.numeric(leaderboard$BsR))
leaderboard$BB. <- scale.normal(as.numeric(leaderboard$BB.))
leaderboard
leaderboard$X. <- NULL
leaderboard
leaderboard<-data.frame(tables$LeaderBoard1_dg1_ctl00)
leaderboard
#remove the rankings column at the beginning of the data frame
leaderboard$X. <- NULL
#remove the % from the walk and strikeout columns
leaderboard$BB. <- gsub(" %", "", leaderboard$BB.)
leaderboard$K. <- gsub(" %", "", leaderboard$K.)
#normalize the columns between 0 and 1
leaderboard$BsR <- scale.normal(as.numeric(leaderboard$BsR))
leaderboard$BB. <- scale.normal(as.numeric(leaderboard$BB.))
leaderboard$K. <- scale.inverse(as.numeric(leaderboard$K.))
leaderboard$OBP <- scale.normal(as.numeric(leaderboard$OBP))
leaderboard$ISO <- scale.normal(as.numeric(leaderboard$ISO))
leaderboard$Def <- scale.normal(as.numeric(leaderboard$Def))
leaderboard
library(rCharts)
library(fmsb)
#pull one team from leaderboard for plotting
one.team<-leaderboard[9,]  #different number for each hitter. call hitters.sorted and find
#provide labels for the radar chart
offense.labels =c("Walk Rate", 'K Rate', 'OBP', 'ISO', 'Baserunning', 'Defense')
#plot the radar chart for the team's offensive capabilities
lapply(1:1, function(i) {
radarchart(rbind(rep(1,1), rep(0,1), one.team[i,-1]), pdensity=c(0, 0, 100),
title=one.team[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=offense.labels, vlcex=1)
})
#pull one team from leaderboard for plotting
one.team<-leaderboard[6,]  #different number for each hitter. call hitters.sorted and find
#provide labels for the radar chart
offense.labels =c("Walk Rate", 'K Rate', 'OBP', 'ISO', 'Baserunning', 'Defense')
#plot the radar chart for the team's offensive capabilities
lapply(1:1, function(i) {
radarchart(rbind(rep(1,1), rep(0,1), one.team[i,-1]), pdensity=c(0, 0, 100),
title=one.team[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=offense.labels, vlcex=1)
})
leaderboard<-data.frame(tables$LeaderBoard1_dg1_ctl00)
leaderboard
scale.inverse<-function(m){
1-((m - min(m))/(max(m)-min(m)))
}
#remove the rankings column at the beginning of the data frame
leaderboard$X. <- NULL
#remove the % from the walk and strikeout columns
leaderboard$BB. <- gsub(" %", "", leaderboard$BB.)
leaderboard$K. <- gsub(" %", "", leaderboard$K.)
#normalize the columns between 0 and 1
leaderboard$BsR <- scale.normal(as.numeric(leaderboard$BsR))
leaderboard$BB. <- scale.normal(as.numeric(leaderboard$BB.))
leaderboard$K. <- scale.inverse(as.numeric(leaderboard$K.))
leaderboard$OBP <- scale.normal(as.numeric(leaderboard$OBP))
leaderboard$ISO <- scale.normal(as.numeric(leaderboard$ISO))
leaderboard$Def <- scale.normal(as.numeric(leaderboard$Def))
library(rCharts)
library(fmsb)
#pull one team from leaderboard for plotting
one.team<-leaderboard[6,]  #different number for each hitter. call hitters.sorted and find
#provide labels for the radar chart
offense.labels =c("Walk Rate", 'K Rate', 'OBP', 'ISO', 'Baserunning', 'Defense')
#plot the radar chart for the team's offensive capabilities
lapply(1:1, function(i) {
radarchart(rbind(rep(1,1), rep(0,1), one.team[i,-1]), pdensity=c(0, 0, 100),
title=one.team[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=offense.labels, vlcex=1)
})
url <- "http://www.fangraphs.com/leaders.aspx?pos=all&stats=bat&lg=all&qual=0&type=c,34,35,37,40,111,199&season=2011&month=0&season1=&ind=0&team=0,ts&rost=&age=&filter=&players=0"
tables <- readHTMLTable(url)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
leaderboard<-data.frame(tables$LeaderBoard1_dg1_ctl00)
#scale data between 0 and 1
scale.normal<-function(m){
(m - min(m))/(max(m)-min(m))
}
#inverse scale data between 0 and 1
scale.inverse<-function(m){
1-((m - min(m))/(max(m)-min(m)))
}
#remove the rankings column at the beginning of the data frame
leaderboard$X. <- NULL
#remove the % from the walk and strikeout columns
leaderboard$BB. <- gsub(" %", "", leaderboard$BB.)
leaderboard$K. <- gsub(" %", "", leaderboard$K.)
#normalize the columns between 0 and 1
leaderboard$BsR <- scale.normal(as.numeric(leaderboard$BsR))
leaderboard$BB. <- scale.normal(as.numeric(leaderboard$BB.))
leaderboard$K. <- scale.inverse(as.numeric(leaderboard$K.))
leaderboard$OBP <- scale.normal(as.numeric(leaderboard$OBP))
leaderboard$ISO <- scale.normal(as.numeric(leaderboard$ISO))
leaderboard$Def <- scale.normal(as.numeric(leaderboard$Def))
leaderboard
one.team<-leaderboard[2,]  #different number for each hitter. call hitters.sorted and find
#provide labels for the radar chart
offense.labels =c("Walk Rate", 'K Rate', 'OBP', 'ISO', 'Baserunning', 'Defense')
#plot the radar chart for the team's offensive capabilities
lapply(1:1, function(i) {
radarchart(rbind(rep(1,1), rep(0,1), one.team[i,-1]), pdensity=c(0, 0, 100),
title=one.team[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=offense.labels, vlcex=1)
})
one.team<-leaderboard[5,]  #different number for each hitter. call hitters.sorted and find
#provide labels for the radar chart
offense.labels =c("Walk Rate", 'K Rate', 'OBP', 'ISO', 'Baserunning', 'Defense')
#plot the radar chart for the team's offensive capabilities
lapply(1:1, function(i) {
radarchart(rbind(rep(1,1), rep(0,1), one.team[i,-1]), pdensity=c(0, 0, 100),
title=one.team[i, 1], maxmin=F, axistype=0, centerzero=T, vlabels=offense.labels, vlcex=1)
})
